"use strict";(self.webpackChunkOERTemplate=self.webpackChunkOERTemplate||[]).push([[8040],{4696:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"API-Routes-Middleware/api-routes-intro","title":"API Routes Introduction","description":"API Routes Introduction","source":"@site/docs/API-Routes-Middleware/api-routes-intro.md","sourceDirName":"API-Routes-Middleware","slug":"/API-Routes-Middleware/api-routes-intro","permalink":"/WebProgrammingForAppsAndServices/API-Routes-Middleware/api-routes-intro","draft":false,"unlisted":false,"editUrl":"https://github.com/catherine-leung/OERTemplate/tree/main/docs/API-Routes-Middleware/api-routes-intro.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"api-routes-intro","title":"API Routes Introduction","sidebar_position":1,"description":"API Routes Introduction"},"sidebar":"courseNotesSidebar","previous":{"title":"Example Code","permalink":"/WebProgrammingForAppsAndServices/Pages-Routing/example-code"},"next":{"title":"Middeware","permalink":"/WebProgrammingForAppsAndServices/API-Routes-Middleware/middleware"}}');var r=s(4848),o=s(8453);const i={id:"api-routes-intro",title:"API Routes Introduction",sidebar_position:1,description:"API Routes Introduction"},a='"API" Routes Introduction',d={},l=[{value:"Route Definitions",id:"route-definitions",level:2},{value:"&#39;req&#39; and &#39;res&#39;",id:"req-and-res",level:3},{value:"HTTP Methods",id:"http-methods",level:3},{value:"Dynamic Routes",id:"dynamic-routes",level:3},{value:"Web API Structure",id:"web-api-structure",level:2},{value:"Using MongoDB (Mongoose)",id:"using-mongodb-mongoose",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"api-routes-introduction",children:'"API" Routes Introduction'})}),"\n",(0,r.jsx)(n.p,{children:"One of the more interesting features of Next.js is the ability specify routes for a Web API to be executed on the same server serving your site. This extends the functionality of the server, in that it not only pre-renders and serves your files but also can act as a back end API for your application!"}),"\n",(0,r.jsxs)(n.p,{children:['Recall, when we first created a boilerplate Next.js app, we were we given an "index.js" file within the "pages" folder that rendered the exported "Home" component at the default route ("/"). We were also provided with an "api" folder, containing a single "hello.js" file. Therefore, if we follow the structure of the "pages" folder, we should be able to access a "hello" route from the "api" folder, ie: "',(0,r.jsx)(n.a,{href:"http://localhost:3000/api/hello",children:"http://localhost:3000/api/hello"}),'". This is indeed the case, and the server will respond with:']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{ "name": "John Doe" }\n'})}),"\n",(0,r.jsx)(n.h2,{id:"route-definitions",children:"Route Definitions"}),"\n",(0,r.jsxs)(n.p,{children:['If you open the "hello.js" file, you will see some code that looks very similar to how ',(0,r.jsx)(n.a,{href:"https://expressjs.com/en/guide/routing.html",children:'routes are defined in "Express"'}),", ie:"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"File:"}),' "pages/api/hello.js"']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"export default function handler(req, res) {\n  res.status(200).json({ name: 'John Doe' });\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"req-and-res",children:"'req' and 'res'"}),"\n",(0,r.jsxs)(n.p,{children:["You will see that both ",(0,r.jsx)(n.a,{href:"https://nodejs.org/api/http.html#class-httpincomingmessage",children:'"req"'})," and ",(0,r.jsx)(n.a,{href:"https://nodejs.org/api/http.html#class-httpserverresponse",children:'"res"'})," objects are available to the exported callback function in order to give us access to the HTTP request / response. However, it is important to note that these are ",(0,r.jsx)(n.strong,{children:"not"})," the same as the ",(0,r.jsx)(n.a,{href:"https://expressjs.com/en/api.html#req",children:'"Request"'})," and ",(0,r.jsx)(n.a,{href:"https://expressjs.com/en/api.html#res",children:'"Response"'})," objects provided by ",(0,r.jsx)(n.a,{href:"https://expressjs.com/en/guide/routing.html",children:'"Express"'}),", though they serve the same purpose."]}),"\n",(0,r.jsxs)(n.p,{children:['Additionally, "middleware" functions have been built in to parse the incoming request, which gives the ',(0,r.jsx)(n.strong,{children:'"req"'})," object the following ",(0,r.jsx)(n.em,{children:"additional"})," properties:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"req.cookies"})," - An object containing the cookies sent by the request. Defaults to "]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"req.query"})," - An object containing the query string. Defaults to ",'" - Note: route parameter values also included.']}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"req.body"})," - An object containing the body parsed by content-type, or null if no body was sent"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:['Similarly, some "helper functions" have been made available on the ',(0,r.jsx)(n.strong,{children:'"res"'})," object to provide ",(0,r.jsx)(n.em,{children:"additional"}),' functionality. These are similar to what is offered by "Express":']}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"res.status(code)"})," - A function to set the status code. code must be a valid HTTP status code"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"res.json(body)"})," - Sends a JSON response. body must be a serializable object"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"res.send(body)"})," - Sends the HTTP response. body can be a string, an object or a Buffer"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"res.redirect([status,] path)"}),' - Redirects to a specified path or URL. status must be a valid HTTP status code. If not specified, status defaults to "307" "Temporary redirect".']}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"res.revalidate(urlPath)"})," - ",(0,r.jsx)(n.a,{href:"https://nextjs.org/docs/basic-features/data-fetching/incremental-static-regeneration#on-demand-revalidation-beta",children:"Revalidate a page on demand"})," using getStaticProps. urlPath must be a string."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"http-methods",children:"HTTP Methods"}),"\n",(0,r.jsxs)(n.p,{children:['At the moment, the "hello" API route responds to "GET" requests only. If we wish to extend this to match other HTTP methods (ie: "POST"), we can leverage the ',(0,r.jsx)(n.a,{href:"https://nodejs.org/api/http.html#messagemethod",children:'"method"'}),' property of the "req" object:']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"export default function handler(req, res) {\n  const { method } = req;\n\n  switch (method) {\n    case 'GET':\n      res.status(200).json({ name: 'John Doe' });\n      break;\n    case 'POST':\n      // return the 'name' value provided in the body of the rquest\n      res.status(200).json({ name: req.body.name });\n      break;\n    default:\n      // send an error message back, indicating that the method is not supported by this route\n      res.setHeader('Allow', ['GET', 'POST']);\n      res.status(405).end(`Method ${method} Not Allowed`);\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"dynamic-routes",children:"Dynamic Routes"}),"\n",(0,r.jsxs)(n.p,{children:['As with regular routing, API routes may also contain "route parameters". These must be defined in a similar way, in that they must exist in their own .js file with the desired route parameter as the file name. For example, if we wish to match the route "/api/users/',(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"id"})}),'" (where ',(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"id"})})," is the unknown parameter), we would crate the following file:"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"File:"}),' "/pages/api/users/[id].js"']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'export default function handler(req, res) {\n  const { id } = req.query; // "id" route parameter\n  res.status(200).json({ name: `user ${id}` });\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["If we wish to reference the route parameter in the route definition, it can be accessed using ",(0,r.jsx)(n.strong,{children:"req.query"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"web-api-structure",children:"Web API Structure"}),"\n",(0,r.jsx)(n.p,{children:"Using the above techniques, it is possible to create routes that match that of a typical Web API. For example, consider the following files:"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"File:"}),' "/pages/api/users/index.js"']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"export default function handler(req, res) {\n  const { name } = req.body;\n  const { method } = req;\n\n  switch (method) {\n    case 'GET':\n      // Read data from your database\n      res.status(200).json({ message: `TODO: Get All Users` });\n      break;\n    case 'POST':\n      // Create data in your database\n      res.status(200).json({ message: `TODO: Create User with Name: ${name}` });\n      break;\n    default:\n      res.setHeader('Allow', ['GET', 'POST']);\n      res.status(405).end(`Method ${method} Not Allowed`);\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"File:"}),' "/pages/api/users/[id].js"']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"export default function handler(req, res) {\n  const { id } = req.query;\n  const { name } = req.body;\n  const { method } = req;\n\n  switch (method) {\n    case 'GET':\n      // Read data from your database\n      res.status(200).json({ message: `TODO: Get User with id: ${id} ` });\n      break;\n    case 'PUT':\n      // Update data in your database\n      res.status(200).json({ message: `TODO: Update User with id: ${id} - Set Name: ${name}` });\n      break;\n    case 'DELETE':\n      // Delete data in your database\n      res.status(200).json({ message: `TODO: Delete User with id: ${id}` });\n      break;\n    default:\n      res.setHeader('Allow', ['GET', 'PUT', 'DELETE']);\n      res.status(405).end(`Method ${method} Not Allowed`);\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Here, we have accounted for each of the major operations, ie:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Route"}),(0,r.jsx)(n.th,{children:"HTTP Method"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"/api/users"}),(0,r.jsx)(n.td,{children:"GET"}),(0,r.jsx)(n.td,{children:"Get all the users"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"/api/users"}),(0,r.jsx)(n.td,{children:"POST"}),(0,r.jsx)(n.td,{children:"Create a user"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["/api/users/",":id"]}),(0,r.jsx)(n.td,{children:"GET"}),(0,r.jsx)(n.td,{children:"Get a single user"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["/api/users/",":id"]}),(0,r.jsx)(n.td,{children:"PUT"}),(0,r.jsx)(n.td,{children:"Update a user with new information"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["/api/users/",":id"]}),(0,r.jsx)(n.td,{children:"DELETE"}),(0,r.jsx)(n.td,{children:"Delete a user"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"using-mongodb-mongoose",children:"Using MongoDB (Mongoose)"}),"\n",(0,r.jsxs)(n.p,{children:["If we wish to extend the API structure to work with real data (ie: using MongoDB Atlas), we can use the familiar ",(0,r.jsx)(n.a,{href:"https://mongoosejs.com/",children:'"Mongoose" ODM'}),"."]}),"\n",(0,r.jsx)(n.p,{children:"To get started, install it as a dependency:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install mongoose\n"})}),"\n",(0,r.jsxs)(n.p,{children:['Next, since the database connection will be shared in multiple files (ie: "/pages/api/users/[id].js" and "/pages/api/users/index.js"), we should place the database ',(0,r.jsx)(n.strong,{children:"model"})," and ",(0,r.jsx)(n.strong,{children:"connection"})," logic in a separate file (or files) somewhere within our project folder. Since this code is not responsible for rendering a specific route or component, we will create a new ",(0,r.jsx)(n.strong,{children:'"lib"'})," folder and place it there:"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"File:"})," lib/dbUtils.js"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import mongoose from 'mongoose';\n\nconst userSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n    unique: true,\n  },\n});\n\nmongoose.models = {};\nexport const UserModel = mongoose.model('users', userSchema);\n\nexport async function mongooseConnect() {\n  if (mongoose.connections[0].readyState) {\n    return true;\n  }\n\n  try {\n    await mongoose.connect(`Your MongoDB Connection String Here`);\n    return true;\n  } catch (err) {\n    throw new Error(err);\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["You can see from the above code, that we are exporting both the ",(0,r.jsx)(n.strong,{children:"UserModel"})," and the ",(0,r.jsx)(n.strong,{children:"mongooseConnect()"})," function to be used in our API routes. You will also notice that we have created our ",(0,r.jsx)(n.a,{href:"https://mongoosejs.com/docs/guide.html",children:'"Schema"'})," and reset the ",(0,r.jsx)(n.a,{href:"https://mongoosejs.com/docs/api/connection.html#Connection.prototype.models",children:'"models"'}),' before defining the "UserModel" (failing to do so may result in an "OverwriteModelError", ie: "Cannot overwrite \'users\' model once compiled.").']}),"\n",(0,r.jsxs)(n.p,{children:['Additionally, you will notice that our "mongooseConnect()" function checks to see if our connection is in a ',(0,r.jsx)(n.a,{href:"https://mongoosejs.com/docs/api/connection.html#Connection.prototype.readyState",children:'"ready" state'}),". If this property is ",(0,r.jsx)(n.em,{children:"falsy"})," ie: ",(0,r.jsx)(n.strong,{children:"0"}),", then our connection is ",(0,r.jsx)(n.strong,{children:"disconnected"}),' and we must create a new connection using "mongoose.connect()". If the ".readystate" property is ',(0,r.jsx)(n.em,{children:"truthy"}),", then this function does not need to create a new connection and simply returns true."]}),"\n",(0,r.jsxs)(n.p,{children:['With our "dbUtils.js" file complete, we can focus on adding the remainder of the ',(0,r.jsx)(n.a,{href:"https://webprogrammingtoolsandframeworks.sdds.ca/NoSQL-Database-MongoDB/operations-crud-reference",children:"CRUD Operations"})," to our API routes, specifically:"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"File:"}),' "/pages/api/users/index.js"']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { UserModel, mongooseConnect } from '@/lib/dbUtils';\n\nexport default async function handler(req, res) {\n  const { name } = req.body;\n  const { method } = req;\n\n  try {\n    await mongooseConnect();\n\n    switch (method) {\n      case 'GET':\n        let users = await UserModel.find().exec();\n        res.status(200).json(users);\n        break;\n      case 'POST':\n        const newUser = new UserModel({ name: name });\n        await newUser.save();\n        res.status(200).json({ message: `User: ${name} Created` });\n        break;\n      default:\n        res.setHeader('Allow', ['GET', 'POST']);\n        res.status(405).end(`Method ${method} Not Allowed`);\n    }\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"File:"}),' "/pages/api/users/[id].js"']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { UserModel, mongooseConnect } from '@/lib/dbUtils';\n\nexport default async function handler(req, res) {\n  const { id } = req.query;\n  const { name } = req.body;\n  const { method } = req;\n\n  try {\n    await mongooseConnect();\n\n    switch (method) {\n      case 'GET':\n        let users = await UserModel.find({ _id: id }).exec();\n        res.status(200).json(users[0]);\n        break;\n      case 'PUT':\n        await UserModel.updateOne({ _id: id }, { $set: { name: name } }).exec();\n        res.status(200).json({ message: `User with id: ${id} updated` });\n        break;\n      case 'DELETE':\n        await UserModel.deleteOne({ _id: id }).exec();\n        res.status(200).json({ message: `Deleted User with id: ${id}` });\n        break;\n      default:\n        res.setHeader('Allow', ['GET', 'PUT', 'DELETE']);\n        res.status(405).end(`Method ${method} Not Allowed`);\n    }\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:'In both files, we wait for mongooseConnect() to complete (either creating a connection, or reusing the current one) before we use the "UserModel" to perform our operations.'})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>a});var t=s(6540);const r={},o=t.createContext(r);function i(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);