"use strict";(self.webpackChunkOERTemplate=self.webpackChunkOERTemplate||[]).push([[9459],{1424:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"Handling-Events-Rendering-Data/handling-user-events","title":"Handling User Events","description":"Handling User Events","source":"@site/docs/Handling-Events-Rendering-Data/handling-user-events.md","sourceDirName":"Handling-Events-Rendering-Data","slug":"/Handling-Events-Rendering-Data/handling-user-events","permalink":"/WebProgrammingForAppsAndServices/Handling-Events-Rendering-Data/handling-user-events","draft":false,"unlisted":false,"editUrl":"https://github.com/catherine-leung/OERTemplate/tree/main/docs/Handling-Events-Rendering-Data/handling-user-events.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"handling-user-events","title":"Handling User Events","sidebar_position":1,"description":"Handling User Events"},"sidebar":"courseNotesSidebar","previous":{"title":"Example Code","permalink":"/WebProgrammingForAppsAndServices/React-NextJS-Introduction/example-code"},"next":{"title":"Adding API Data","permalink":"/WebProgrammingForAppsAndServices/Handling-Events-Rendering-Data/adding-API-data"}}');var i=t(4848),r=t(8453);const a={id:"handling-user-events",title:"Handling User Events",sidebar_position:1,description:"Handling User Events"},o="Handling User Events",c={},l=[{value:"Adding Parameters",id:"adding-parameters",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"handling-user-events",children:"Handling User Events"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"NOTE:"})," Some of the below code examples and explanations have been reproduced from sections of the ",(0,i.jsx)(n.a,{href:"https://react.dev/",children:"official online documentation"})," for React."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Handling events in React is very similar to handling events on DOM elements using properties like ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclick",children:"onclick"}),". However, there are some differences, ie:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"React events are named using camelCase, rather than lowercase."}),"\n",(0,i.jsx)(n.li,{children:"With JSX you pass a function as the event handler, rather than a string."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"For example, the HTML:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<button onclick="processClick()">Click Me!</button>\n'})}),"\n",(0,i.jsx)(n.p,{children:"is slightly different in React:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"<button onClick={processClick}>Click me!</button>\n"})}),"\n",(0,i.jsx)(n.p,{children:'To see this in action, let\'s code a simple "click counter" component that renders a single button that shows a number that increases by one (1) every time it\'s clicked. To achieve this, we\'ll create a new component called "ClickCounter":'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"import { useState } from 'react';\n\nexport default function ClickCounter(props) {\n  const [numClicks, setNumClicks] = useState(0);\n\n  function increaseNumClicks(e) { // 'e' is the current event object\n    setNumClicks(numClicks + 1);\n  }\n\n  return <button onClick={increaseNumClicks}>Clicks: {numClicks}</button>\n}\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"NOTE"}),": Be careful when updating state based on a previous value (ie: numClicks + 1 in the example above), as it may not always work as expected on types that are not ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Glossary/Primitive",children:"primitive"}),', ie: "string", "number", "boolean", etc. For example, if we use the same logic to add an element to a state value holding an ',(0,i.jsx)(n.em,{children:"array"}),", we may be tempted to use the following code:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"setMyArray(myArray.push('new element'));\n"})}),"\n",(0,i.jsxs)(n.p,{children:["However, updating state in this manner ",(0,i.jsx)(n.strong,{children:"will not"})," cause the component to re-render. Instead, we must provide a ",(0,i.jsx)(n.strong,{children:"new array"}),", ie:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"setMyArray([...myArray, 'new element']);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["For more information see: ",(0,i.jsx)(n.a,{href:"https://react.dev/learn/adding-interactivity#updating-arrays-in-state",children:"Updating arrays in state"})," and ",(0,i.jsx)(n.a,{href:"https://react.dev/learn/adding-interactivity#updating-objects-in-state",children:"Updating objects in state"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Here, you will notice that we have added a couple new concepts to the construction and rendering of a typical functional component, ie:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["We have declared a function to handle the event. It receives a single parameter 'e' which is a \"",(0,i.jsx)(n.a,{href:"https://react.dev/reference/react-dom/components/common#react-event-object",children:"synthetic event"}),'" - "a cross-browser wrapper around the browser\u2019s native event. It has the same interface as the browser\u2019s native event, including ',(0,i.jsx)(n.em,{children:"stopPropagation()"})," and ",(0,i.jsx)(n.em,{children:"preventDefault()"}),', except the events work identically across all browsers."']}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:'On our button element, we use "onClick" (instead of "onclick") to reference the event handler and "wire up" the event.'}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"NOTE:"})," For a full list events please refer to the official documentation for ",(0,i.jsx)(n.a,{href:"https://react.dev/reference/react-dom/components/common",children:"supported events"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"adding-parameters",children:"Adding Parameters"}),"\n",(0,i.jsxs)(n.p,{children:['As you can see from the above example, our callback function "increaseNumClicks" is registered to the onClick event by ',(0,i.jsx)(n.em,{children:"passing the function only"})," - the function is not actually ",(0,i.jsx)(n.em,{children:"invoked"})," anywhere in our JSX. This works fine, but what if we wish to pass one or more parameters to the function, in addition to the SyntheticEvent (above)?"]}),"\n",(0,i.jsxs)(n.p,{children:["This can actually be achieved by registering the event as an anonymous function declared within the JSX, which ",(0,i.jsx)(n.em,{children:"invokes"})," the callback function. For example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"function increaseNumClicks(e, message) { // 'e' is the current event object\n  console.log(message);\n  setNumClicks(numClicks + 1);\n}\n\nreturn <button onClick={(e) => { increaseNumClicks(e, \"Hello\") }}>Clicks: {numClicks}</button>\n"})}),"\n",(0,i.jsxs)(n.p,{children:['Here, we declare the callback function in place. It accepts a single parameter "e" as before, but the body of the function ',(0,i.jsx)(n.em,{children:"invokes"}),' the callback function. This allows us to continue to pass the SyntheticEvent (e) to our event handler "increaseNumClicks" as well as add any other parameter values.']})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(6540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);