"use strict";(self.webpackChunkOERTemplate=self.webpackChunkOERTemplate||[]).push([[5690],{8085:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"Handling-Events-Rendering-Data/conditionally-displaying-data","title":"Conditionally Displaying Data","description":"Conditionally Displaying Data","source":"@site/docs/Handling-Events-Rendering-Data/conditionally-displaying-data.md","sourceDirName":"Handling-Events-Rendering-Data","slug":"/Handling-Events-Rendering-Data/conditionally-displaying-data","permalink":"/WebProgrammingForAppsAndServices/Handling-Events-Rendering-Data/conditionally-displaying-data","draft":false,"unlisted":false,"editUrl":"https://github.com/catherine-leung/OERTemplate/tree/main/docs/Handling-Events-Rendering-Data/conditionally-displaying-data.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"conditionally-displaying-data","title":"Conditionally Displaying Data","sidebar_position":3,"description":"Conditionally Displaying Data"},"sidebar":"courseNotesSidebar","previous":{"title":"Adding API Data","permalink":"/WebProgrammingForAppsAndServices/Handling-Events-Rendering-Data/adding-API-data"},"next":{"title":"Example Code","permalink":"/WebProgrammingForAppsAndServices/Handling-Events-Rendering-Data/example-code"}}');var i=a(4848),r=a(8453);const s={id:"conditionally-displaying-data",title:"Conditionally Displaying Data",sidebar_position:3,description:"Conditionally Displaying Data"},o="Conditionally Displaying Data",l={},d=[{value:"Logical &amp;&amp; Operator (If)",id:"logical--operator-if",level:2},{value:"Ternary Operator (If-Else)",id:"ternary-operator-if-else",level:2},{value:"Array.map() (Iteration)",id:"arraymap-iteration",level:2},{value:"Returning Null",id:"returning-null",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"conditionally-displaying-data",children:"Conditionally Displaying Data"})}),"\n",(0,i.jsxs)(n.p,{children:["So far, we have seen how we can render a value in JSX by placing an expression within curly braces ",(0,i.jsx)(n.code,{children:"{...}"}),". This expression is then evaluated and used in place within our JSX, either to:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"render the data in place, ie:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"{date.toLocaleTimeString()}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"provide a value to a property, ie:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"<img src={user.avatarUrl} />\n"})}),"\n",(0,i.jsxs)(n.p,{children:["However, we actually have a great deal of control over how the data is displayed using this syntax. Since the content between the curly braces ",(0,i.jsx)(n.code,{children:"{...}"})," is an ",(0,i.jsx)(n.em,{children:"expression"}),", we can use well known JavaScript syntax and functions to control our output."]}),"\n",(0,i.jsx)(n.p,{children:"Before we move on to the examples, let's assume that we have the following static collection of data hardcoded in the state of a component:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const [users, setUsers] = useState([\n  { user: 'fred', active: false, age: 40 },\n  { user: 'pebbles', active: false, age: 1 },\n  { user: 'barney', active: true, age: 36 },\n]);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"logical--operator-if",children:"Logical && Operator (If)"}),"\n",(0,i.jsxs)(n.p,{children:["First, let's take a look at a situation where we may only want to render some data under a specific condition. For example, say we only want to show the 'user' name if the user is \"active\". To accomplish this, we can leverage the ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND",children:"&& Operator"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"return <div>{users[0].active && <p>{users[0].user} is Active!</p>}</div>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"ternary-operator-if-else",children:"Ternary Operator (If-Else)"}),"\n",(0,i.jsxs)(n.p,{children:["Next, let's look at how we can use the ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator",children:"ternary operator"}),", ie: ",(0,i.jsx)(n.code,{children:'(age > 18) ? "adult" : "minor"'}),' to render a different <p> element depending on whether or not the user is "active".']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"return (\n  <div>\n    {users[0].active ? <p>{users[0].user} is Active!</p> : <p>{users[0].user} is Inactive!</p>}\n  </div>\n);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"arraymap-iteration",children:"Array.map() (Iteration)"}),"\n",(0,i.jsxs)(n.p,{children:["One extremely common task is iterating over a collection and outputting each element using a consistent format. This could be rows in a table, items in a list, other components, etc. To achieve this within our JSX code, we can use the ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map",children:"Array.map()"})," method, ie:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"return (\n  <table>\n    <thead>\n      <tr>\n        <th>User</th>\n        <th>Active</th>\n        <th>Age</th>\n      </tr>\n    </thead>\n    <tbody>\n      {users.map((user) => (\n        <tr>\n          <td>{user.user}</td>\n          <td>{user.active ? 'yes' : 'no'}</td>\n          <td>{user.age}</td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n"})}),"\n",(0,i.jsx)(n.p,{children:'While this does work to render each user in its own <tr> element, we actually have one small problem. If you open the console in the browser, you will see an error: "Warning: Each child in a list should have a unique "key" prop." According to the documentation:'}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:'Normally, we would have a unique id to work with (ie "_id" from MongoDB), however with our list we don\'t have any "stable" id\'s to work with. In this case, we can make use of the 2nd parameter to the "map()" method - the "index". This requires us to change our JSX to use the following code:'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"{users.map((user, index) => (\n  <tr key={index}>\n    <td>{user.user}</td>\n    <td>{user.active ? 'yes' : 'no'}</td>\n    <td>{user.age}</td>\n  </tr>\n))}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"returning-null",children:"Returning Null"}),"\n",(0,i.jsxs)(n.p,{children:["Finally, we can actually choose not to render anything by returning ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.em,{children:"null"})}),", for example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"if (!loading) {\n  return <p>Done Loading! - TODO: Show the data here</p>\n} else {\n  return null; // don't render anything - still loading\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>o});var t=a(6540);const i={},r=t.createContext(i);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);