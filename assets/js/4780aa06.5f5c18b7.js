"use strict";(self.webpackChunkipc144=self.webpackChunkipc144||[]).push([[7423],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,h=u["".concat(l,".").concat(m)]||u[m]||c[m]||o;return n?r.createElement(h,s(s({ref:t},d),{},{components:n})):r.createElement(h,s({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2348:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));n(8209);const o={id:"api-routes-intro",title:"API Routes Introduction",sidebar_position:1,description:"API Routes Introduction"},s='"API" Routes Introduction',i={unversionedId:"API-Routes-Middleware/api-routes-intro",id:"API-Routes-Middleware/api-routes-intro",title:"API Routes Introduction",description:"API Routes Introduction",source:"@site/docs/API-Routes-Middleware/api-routes-intro.md",sourceDirName:"API-Routes-Middleware",slug:"/API-Routes-Middleware/api-routes-intro",permalink:"/WebProgrammingForAppsAndServices/API-Routes-Middleware/api-routes-intro",draft:!1,editUrl:"hhttps://github.com/patrick-crawford/WebProgrammingForAppsAndServices/tree/master/docs/API-Routes-Middleware/api-routes-intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"api-routes-intro",title:"API Routes Introduction",sidebar_position:1,description:"API Routes Introduction"},sidebar:"courseNotesSidebar",previous:{title:"Example Code",permalink:"/WebProgrammingForAppsAndServices/Pages-Routing/example-code"},next:{title:"Middeware",permalink:"/WebProgrammingForAppsAndServices/API-Routes-Middleware/middleware"}},l={},p=[{value:"Route Definitions",id:"route-definitions",level:2},{value:"&#39;req&#39; and &#39;res&#39;",id:"req-and-res",level:3},{value:"HTTP Methods",id:"http-methods",level:3},{value:"Dynamic Routes",id:"dynamic-routes",level:3},{value:"Web API Structure",id:"web-api-structure",level:2},{value:"Using MongoDB (Mongoose)",id:"using-mongodb-mongoose",level:2}],d={toc:p},u="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"api-routes-introduction"},'"API" Routes Introduction'),(0,a.kt)("p",null,"One of the more interesting features of Next.js is the ability specify routes for a Web API to be executed on the same server serving your site. This extends the functionality of the server, in that it not only pre-renders and serves your files but also can act as a back end API for your application!"),(0,a.kt)("p",null,'Recall, when we first created a boilerplate Next.js app, we were we given an "index.js" file within the "pages" folder that rendered the exported "Home" component at the default route ("/"). We were also provided with an "api" folder, containing a single "hello.js" file. Therefore, if we follow the structure of the "pages" folder, we should be able to access a "hello" route from the "api" folder, ie: "http://localhost:3000/api/hello". This is indeed the case, and the server will respond with:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{ "name": "John Doe" }\n')),(0,a.kt)("h2",{id:"route-definitions"},"Route Definitions"),(0,a.kt)("p",null,'If you open the "hello.js" file, you will see some code that looks very similar to how ',(0,a.kt)("a",{parentName:"p",href:"https://expressjs.com/en/guide/routing.html"},'routes are defined in "Express"'),", ie:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"File:"),' "pages/api/hello.js"'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"export default function handler(req, res) {\n  res.status(200).json({ name: 'John Doe' });\n}\n")),(0,a.kt)("h3",{id:"req-and-res"},"'req' and 'res'"),(0,a.kt)("p",null,"You will see that both ",(0,a.kt)("a",{parentName:"p",href:"https://nodejs.org/api/http.html#class-httpincomingmessage"},'"req"')," and ",(0,a.kt)("a",{parentName:"p",href:"https://nodejs.org/api/http.html#class-httpserverresponse"},'"res"')," objects are available to the exported callback function in order to give us access to the HTTP request / response. However, it is important to note that these are ",(0,a.kt)("strong",{parentName:"p"},"not")," the same as the ",(0,a.kt)("a",{parentName:"p",href:"https://expressjs.com/en/api.html#req"},'"Request"')," and ",(0,a.kt)("a",{parentName:"p",href:"https://expressjs.com/en/api.html#res"},'"Response"')," objects provided by ",(0,a.kt)("a",{parentName:"p",href:"https://expressjs.com/en/guide/routing.html"},'"Express"'),", though they serve the same purpose."),(0,a.kt)("p",null,'Additionally, "middleware" functions have been built in to parse the incoming request, which gives the ',(0,a.kt)("strong",{parentName:"p"},'"req"')," object the following ",(0,a.kt)("em",{parentName:"p"},"additional")," properties:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"req.cookies")," - An object containing the cookies sent by the request. Defaults to {}")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"req.query"),' - An object containing the query string. Defaults to {}" - Note: route parameter values also included.')),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"req.body")," - An object containing the body parsed by content-type, or null if no body was sent"))),(0,a.kt)("p",null,'Similarly, some "helper functions" have been made available on the ',(0,a.kt)("strong",{parentName:"p"},'"res"')," object to provide ",(0,a.kt)("em",{parentName:"p"},"additional"),' functionality. These are similar to what is offered by "Express":'),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"res.status(code)")," - A function to set the status code. code must be a valid HTTP status code")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"res.json(body)")," - Sends a JSON response. body must be a serializable object")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"res.send(body)")," - Sends the HTTP response. body can be a string, an object or a Buffer")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"res.redirect(","[status,]"," path)"),' - Redirects to a specified path or URL. status must be a valid HTTP status code. If not specified, status defaults to "307" "Temporary redirect".')),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"res.revalidate(urlPath)")," - ",(0,a.kt)("a",{parentName:"p",href:"https://nextjs.org/docs/basic-features/data-fetching/incremental-static-regeneration#on-demand-revalidation-beta"},"Revalidate a page on demand")," using getStaticProps. urlPath must be a string."))),(0,a.kt)("h3",{id:"http-methods"},"HTTP Methods"),(0,a.kt)("p",null,'At the moment, the "hello" API route responds to "GET" requests only. If we wish to extend this to match other HTTP methods (ie: "POST"), we can leverage the ',(0,a.kt)("a",{parentName:"p",href:"https://nodejs.org/api/http.html#messagemethod"},'"method"'),' property of the "req" object:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"export default function handler(req, res) {\n  const { method } = req;\n\n  switch (method) {\n    case 'GET':\n      res.status(200).json({ name: 'John Doe' });\n      break;\n    case 'POST':\n      // return the 'name' value provided in the body of the rquest\n      res.status(200).json({ name: req.body.name });\n      break;\n    default:\n      // send an error message back, indicating that the method is not supported by this route\n      res.setHeader('Allow', ['GET', 'POST']);\n      res.status(405).end(`Method ${method} Not Allowed`);\n  }\n}\n")),(0,a.kt)("h3",{id:"dynamic-routes"},"Dynamic Routes"),(0,a.kt)("p",null,'As with regular routing, API routes may also contain "route parameters". These must be defined in a similar way, in that they must exist in their own .js file with the desired route parameter as the file name. For example, if we wish to match the route "/api/users/',(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"id")),'" (where ',(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"id"))," is the unknown parameter), we would crate the following file:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"File:"),' "/pages/api/users/',"[id]",'.js"'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'export default function handler(req, res) {\n  const { id } = req.query; // "id" route parameter\n  res.status(200).json({ name: `user ${id}` });\n}\n')),(0,a.kt)("p",null,"If we wish to reference the route parameter in the route definition, it can be accessed using ",(0,a.kt)("strong",{parentName:"p"},"req.query"),"."),(0,a.kt)("h2",{id:"web-api-structure"},"Web API Structure"),(0,a.kt)("p",null,"Using the above techniques, it is possible to create routes that match that of a typical Web API. For example, consider the following files:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"File:"),' "/pages/api/users/index.js"'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"export default function handler(req, res) {\n  const { name } = req.body;\n  const { method } = req;\n\n  switch (method) {\n    case 'GET':\n      // Read data from your database\n      res.status(200).json({ message: `TODO: Get All Users` });\n      break;\n    case 'POST':\n      // Create data in your database\n      res.status(200).json({ message: `TODO: Create User with Name: ${name}` });\n      break;\n    default:\n      res.setHeader('Allow', ['GET', 'POST']);\n      res.status(405).end(`Method ${method} Not Allowed`);\n  }\n}\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"File:"),' "/pages/api/users/',"[id]",'.js"'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"export default function handler(req, res) {\n  const { id } = req.query;\n  const { name } = req.body;\n  const { method } = req;\n\n  switch (method) {\n    case 'GET':\n      // Read data from your database\n      res.status(200).json({ message: `TODO: Get User with id: ${id} ` });\n      break;\n    case 'PUT':\n      // Update data in your database\n      res.status(200).json({ message: `TODO: Update User with id: ${id} - Set Name: ${name}` });\n      break;\n    case 'DELETE':\n      // Delete data in your database\n      res.status(200).json({ message: `TODO: Delete User with id: ${id}` });\n      break;\n    default:\n      res.setHeader('Allow', ['GET', 'PUT', 'DELETE']);\n      res.status(405).end(`Method ${method} Not Allowed`);\n  }\n}\n")),(0,a.kt)("p",null,"Here, we have accounted for each of the major operations, ie:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Route"),(0,a.kt)("th",{parentName:"tr",align:null},"HTTP Method"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"/api/users"),(0,a.kt)("td",{parentName:"tr",align:null},"GET"),(0,a.kt)("td",{parentName:"tr",align:null},"Get all the users")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"/api/users"),(0,a.kt)("td",{parentName:"tr",align:null},"POST"),(0,a.kt)("td",{parentName:"tr",align:null},"Create a user")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"/api/users/:id"),(0,a.kt)("td",{parentName:"tr",align:null},"GET"),(0,a.kt)("td",{parentName:"tr",align:null},"Get a single user")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"/api/users/:id"),(0,a.kt)("td",{parentName:"tr",align:null},"PUT"),(0,a.kt)("td",{parentName:"tr",align:null},"Update a user with new information")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"/api/users/:id"),(0,a.kt)("td",{parentName:"tr",align:null},"DELETE"),(0,a.kt)("td",{parentName:"tr",align:null},"Delete a user")))),(0,a.kt)("h2",{id:"using-mongodb-mongoose"},"Using MongoDB (Mongoose)"),(0,a.kt)("p",null,"If we wish to extend the API structure to work with real data (ie: using MongoDB Atlas), we can use the familiar ",(0,a.kt)("a",{parentName:"p",href:"https://mongoosejs.com/"},'"Mongoose" ODM'),"."),(0,a.kt)("p",null,"To get started, install it as a dependency:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm install mongoose\n")),(0,a.kt)("p",null,'Next, since the database connection will be shared in multiple files (ie: "/pages/api/users/',"[id]",'.js" and "/pages/api/users/index.js"), we should place the database ',(0,a.kt)("strong",{parentName:"p"},"model")," and ",(0,a.kt)("strong",{parentName:"p"},"connection")," logic in a separate file (or files) somewhere within our project folder. Since this code is not responsible for rendering a specific route or component, we will create a new ",(0,a.kt)("strong",{parentName:"p"},'"lib"')," folder and place it there:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"File:")," lib/dbUtils.js"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import mongoose from 'mongoose';\n\nconst userSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n    unique: true,\n  },\n});\n\nmongoose.models = {};\nexport const UserModel = mongoose.model('users', userSchema);\n\nexport async function mongooseConnect() {\n  if (mongoose.connections[0].readyState) {\n    return true;\n  }\n\n  try {\n    await mongoose.connect(`Your MongoDB Connection String Here`);\n    return true;\n  } catch (err) {\n    throw new Error(err);\n  }\n}\n")),(0,a.kt)("p",null,"You can see from the above code, that we are exporting both the ",(0,a.kt)("strong",{parentName:"p"},"UserModel")," and the ",(0,a.kt)("strong",{parentName:"p"},"mongooseConnect()")," function to be used in our API routes. You will also notice that we have created our ",(0,a.kt)("a",{parentName:"p",href:"https://mongoosejs.com/docs/guide.html"},'"Schema"')," and reset the ",(0,a.kt)("a",{parentName:"p",href:"https://mongoosejs.com/docs/api/connection.html#Connection.prototype.models"},'"models"'),' before defining the "UserModel" (failing to do so may result in an "OverwriteModelError", ie: "Cannot overwrite \'users\' model once compiled.").'),(0,a.kt)("p",null,'Additionally, you will notice that our "mongooseConnect()" function checks to see if our connection is in a ',(0,a.kt)("a",{parentName:"p",href:"https://mongoosejs.com/docs/api/connection.html#Connection.prototype.readyState"},'"ready" state'),". If this property is ",(0,a.kt)("em",{parentName:"p"},"falsy")," ie: ",(0,a.kt)("strong",{parentName:"p"},"0"),", then our connection is ",(0,a.kt)("strong",{parentName:"p"},"disconnected"),' and we must create a new connection using "mongoose.connect()". If the ".readystate" property is ',(0,a.kt)("em",{parentName:"p"},"truthy"),", then this function does not need to create a new connection and simply returns true."),(0,a.kt)("p",null,'With our "dbUtils.js" file complete, we can focus on adding the remainder of the ',(0,a.kt)("a",{parentName:"p",href:"https://webprogrammingtoolsandframeworks.sdds.ca/NoSQL-Database-MongoDB/operations-crud-reference"},"CRUD Operations")," to our API routes, specifically:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"File:"),' "/pages/api/users/index.js"'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { UserModel, mongooseConnect } from '@/lib/dbUtils';\n\nexport default async function handler(req, res) {\n  const { name } = req.body;\n  const { method } = req;\n\n  try {\n    await mongooseConnect();\n\n    switch (method) {\n      case 'GET':\n        let users = await UserModel.find().exec();\n        res.status(200).json(users);\n        break;\n      case 'POST':\n        const newUser = new UserModel({ name: name });\n        await newUser.save();\n        res.status(200).json({ message: `User: ${name} Created` });\n        break;\n      default:\n        res.setHeader('Allow', ['GET', 'POST']);\n        res.status(405).end(`Method ${method} Not Allowed`);\n    }\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n}\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"File:"),' "/pages/api/users/',"[id]",'.js"'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { UserModel, mongooseConnect } from '@/lib/dbUtils';\n\nexport default async function handler(req, res) {\n  const { id } = req.query;\n  const { name } = req.body;\n  const { method } = req;\n\n  try {\n    await mongooseConnect();\n\n    switch (method) {\n      case 'GET':\n        let users = await UserModel.find({ _id: id }).exec();\n        res.status(200).json(users[0]);\n        break;\n      case 'PUT':\n        await UserModel.updateOne({ _id: id }, { $set: { name: name } }).exec();\n        res.status(200).json({ message: `User with id: ${id} updated` });\n        break;\n      case 'DELETE':\n        await UserModel.deleteOne({ _id: id }).exec();\n        res.status(200).json({ message: `Deleted User with id: ${id}` });\n        break;\n      default:\n        res.setHeader('Allow', ['GET', 'PUT', 'DELETE']);\n        res.status(405).end(`Method ${method} Not Allowed`);\n    }\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n}\n")),(0,a.kt)("p",null,'In both files, we wait for mongooseConnect() to complete (either creating a connection, or reusing the current one) before we use the "UserModel" to perform our operations.'))}c.isMDXComponent=!0},8209:(e,t,n)=>{n(7294)}}]);